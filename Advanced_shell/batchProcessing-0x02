#!/bin/bash

# Create a directory for the Pokémon data
mkdir -p pokemon_data

# List of Pokémon to retrieve (including a non-existent one for demonstration)
POKEMON=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon" "nonexistent")
MAX_RETRIES=3
ERROR_FILE="errors.txt"

# Loop through each Pokémon in the array
for pokemon in "${POKEMON[@]}"; do
    echo "Fetching data for $pokemon..."

    # Define the API endpoint and output file
    API_URL="https://pokeapi.co/api/v2/pokemon/$pokemon"
    OUTPUT_FILE="pokemon_data/${pokemon}.json"
    
    # Initialize retry counter
    retry_count=0
    success=false

    # Retry loop
    while [ "$retry_count" -lt "$MAX_RETRIES" ] && [ "$success" = false ]; do
        curl -s "$API_URL" -o "$OUTPUT_FILE"
        
        # Check if the HTTP status code indicates success (200-299)
        # Use -w "%{http_code}" to get the status code
        status_code=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL")

        if [ "$status_code" -ge 200 ] && [ "$status_code" -lt 300 ]; then
            echo "Saved data to $OUTPUT_FILE ✅"
            success=true
        else
            echo "Attempt $((retry_count + 1)) failed for $pokemon. Retrying..."
            retry_count=$((retry_count + 1))
            sleep 2 # Add a longer delay between retries
        fi
    done

    # If all retries failed, log the error
    if [ "$success" = false ]; then
        echo "$(date): Error: Failed to retrieve data for $pokemon after $MAX_RETRIES retries." >> "$ERROR_FILE"
        echo "Failed to retrieve data for $pokemon. Error logged to $ERROR_FILE."
    fi

    # Add a delay to handle rate-limiting
    sleep 1
done
